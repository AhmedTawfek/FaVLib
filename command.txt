# Please define the absolute path of the folder that you want virtuoso to map to, from there you will upload the files to virtuoso
export ABS_PATH=/media/apc/DATA1/Maastricht

# run this command to run Virtuoso, it will also install it if it is not there

sudo docker run --rm --name virtuoso.2.7.1 \
    -p 8890:8890 -p 1111:1111 \
    -e DBA_PASSWORD=dba \
    -e SPARQL_UPDATE=true \
    -e DEFAULT_GRAPH=http://bio2rdf.com/bio2rdf_vocabulary: \
    -v ${ABS_PATH}/bio2rdf-github/virtuoso:/data \
    -d tenforce/virtuoso:1.3.2-virtuoso7.2.1


# go to the dumps folder in virtuoso spesified folder in ${ABS_PATH} and put your rdf dataset file there.

# To LOAD the quads into Virtuoso running docker run the following commands:

docker exec -it virtuoso.2.7.1 bash

isql-v -U dba -P dba

ld_dir('dumps', 'statemenets.nq', 'https://w3id.org/data2services/graph/pharmgkb');

rdf_loader_run();


# exit isql with: exit();
# exit bash with: exit


# Navigate to the path of the jar file inside the repository folder


# parmeters:
# -op: the operation: pex|nex   (positive examples/negative examples)
# -gr: the graph IRI
# -e : SPARQL endpoint
# -pfx: the prefix of the URI of the targeted predicates
# -pr: the name of the predicate (without the prefix) or "all" to select all predicates
# -l : define the limit of returned examples: (all|ineger| double as percentage like 0.2 for 20%)
# -log: define the logfile path


# the command here is to generate negative examples (100 by default) for a specifi predicate 
java -jar favlib-0.0.1-SNAPSHOT-jar-with-dependencies.jar -op nex -o ${ABS_PATH}/favlib/great.nq -gr https://w3id.org/data2services/graph/pharmgkb -e http://localhost:8890/sparql -pfx http://bio2rdf.org/pharmgkb_vocabulary: -pr Chemical-Variant-association -log ${ABS_PATH}/favlib/stats.log

# the command here is to generate negative examples (100 by default) for all predicates
java -jar favlib-0.0.1-SNAPSHOT-jar-with-dependencies.jar -op nex -o ${ABS_PATH}/favlib/great.nq -gr https://w3id.org/data2services/graph/pharmgkb -e http://localhost:8890/sparql -pfx http://bio2rdf.org/pharmgkb_vocabulary: -pr all -log ${ABS_PATH}/favlib/stats.log


# the command here is to generate negative examples for all predicates with a limit of 1000 example for each predicate
java -jar favlib-0.0.1-SNAPSHOT-jar-with-dependencies.jar -op nex -o ${ABS_PATH}/favlib/great.nq -gr https://w3id.org/data2services/graph/pharmgkb -e http://localhost:8890/sparql -pfx http://bio2rdf.org/pharmgkb_vocabulary: -pr all -l 1000 -log ${ABS_PATH}/favlib/stats.log


# the command here is to generate positive examples for all predicates with a limit of 1000 example for each predicate
java -jar favlib-0.0.1-SNAPSHOT-jar-with-dependencies.jar -op pex -o ${ABS_PATH}/favlib/great.nq -gr https://w3id.org/data2services/graph/pharmgkb -e http://localhost:8890/sparql -pfx http://bio2rdf.org/pharmgkb_vocabulary: -pr all -l 100 -log ${ABS_PATH}/favlib/stats.log



# the command here is to generate negative examples for all predicates with a limit of 50% of total predicates example for each predicate
java -jar favlib-0.0.1-SNAPSHOT-jar-with-dependencies.jar -op nex -o ${ABS_PATH}/favlib/great.nq -gr https://w3id.org/data2services/graph/pharmgkb -e http://localhost:8890/sparql -pfx http://bio2rdf.org/pharmgkb_vocabulary: -pr all -l 0.5 -log ${ABS_PATH}/favlib/stats.log


# the command here is to generate positive examples for all predicates with a limit of 50% of total predicates example for each predicate
java -jar favlib-0.0.1-SNAPSHOT-jar-with-dependencies.jar -op pex -o ${ABS_PATH}/favlib/great.nq -gr https://w3id.org/data2services/graph/pharmgkb -e http://localhost:8890/sparql -pfx http://bio2rdf.org/pharmgkb_vocabulary: -pr all -l 0.5 -log ${ABS_PATH}/favlib/stats.log


# to generate the embedding features
python src/RDF2Vec.py -dir data/rdf/drugbank/train/ -ext great_pos.nq -w embeddings/walks -kg embeddings/graph -m embeddings/models -v embeddings/vectors

# train classifier and assign a truth value (probability) for each test fact
python src/TrainingFactModel.py -neg /jupyter/data/rdf/pharmgkb/train/great_neg.nq -pos /jupyter/data/rdf/pharmgkb/train/great_pos.nq -emb /jupyter/embeddings/vectors/Entity2Vec_sg_200_5_5_15_2_500_d5_uniform.txt -test /jupyter/data/rdf/pharmgkb/test/great_neg.nq -o /jupyter/data/output.txt -relmap /jupyter/embeddings/graph/relation2id.txt



sudo docker build -t favlib-embeddings .
sudo docker build -t favlib-exmgen .


sudo docker exec -it favlib-embeddings python src/RDF2Vec.py //test

sudo docker run -d --rm --name favlib -p 8888:8888 -v /media/apc/DATA1/Maastricht/favlib:/jupyter favlib

------------------------------

sudo docker-compose up -d --build --force-recreate virtuoso.2.7.1 favlib

sudo docker-compose exec favlib cwltool --outdir=/jupyter/output/ workflow/main-workflow.cwl workflow/workflow-job.yml




sudo docker build -t favlib .

sudo docker run -d --rm --link virtuoso.2.7.1:virtuoso.2.7.1 --name favlib -p 8888:8888 -v /media/apc/DATA1/Maastricht/favlib:/jupyter -v /tmp:/tmp favlib

sudo docker exec -it favlib cwltool --outdir=/jupyter/output/ workflow/main-workflow.cwl workflow/workflow-job.yml

------------------------------

sudo docker run -d --rm --name favlib-embeddings -p 8888:8888 -v /media/apc/DATA1/Maastricht/favlib:/jupyter -v /tmp:/tmp favlib-embeddings


sudo docker exec -it favlib python src/RDF2Vec.py -dir /jupyter/data/rdf/pharmgkb/complete/ -ext statements.nq -w /jupyter/embeddings/walks -kg /jupyter/embeddings/graph -m /jupyter/embeddings/models -v /jupyter/embeddings/vectors/${param}


sudo docker exec -it favlib python src/TrainingFactModel.py -neg /jupyter/data/rdf/pharmgkb/train/great_neg.nq -pos /jupyter/data/rdf/pharmgkb/train/great_pos.nq -emb /jupyter/embeddings/vectors/Entity2Vec_sg_200_5_5_15_2_500_d5_uniform.txt -test /jupyter/data/rdf/pharmgkb/test/great_neg.nq -o /jupyter/data/output.txt -relmap /jupyter/embeddings/graph




# Please define the dataset folder name
export DATASET=pharmgkb


sudo cwl-runner --outdir ${ABS_PATH}/favlib/output main-workflow.cwl workflow-job.yml



#--------------- Query example------------------------

select ?type (count(?sub) AS ?count) from <https://w3id.org/data2services/graph/pharmgkb> where {?sub <http://bio2rdf.org/pharmgkb_vocabulary:Disease-Gene-association> ?obj. ?sub <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type.} GROUP BY ?type ORDER BY DESC(?count)



select ?type (count(?obj) AS ?count) from <https://w3id.org/data2services/graph/pharmgkb> where {?sub <http://bio2rdf.org/pharmgkb_vocabulary:Disease-Gene-association> ?obj. ?obj <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type.} GROUP BY ?type ORDER BY DESC(?count)



PREFIX  rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT  ?subject ?object
FROM <https://w3id.org/data2services/graph/pharmgkb>
WHERE
  { 
    ?object   rdf:type  <null> .
    ?subject  rdf:type  <http://bio2rdf.org/pharmgkb_vocabulary:Resource> .
    ?subject  <http://bio2rdf.org/pharmgkb_vocabulary:Disease-Gene-association>  ?object
  }
LIMIT 0

